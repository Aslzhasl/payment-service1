package main

import (
	"fmt"
	"github.com/joho/godotenv"
	"log"

	"github.com/gin-gonic/gin"

	"Payment-service/internal/config"
	"Payment-service/internal/routes"
	"Payment-service/internal/storage"
)

func main() {
	// 1) –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
	_ = godotenv.Load()
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("config error: %v", err)
	}

	// 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	store, err := storage.InitStore(cfg.DatabaseURL)
	if err != nil {
		log.Fatalf("db init error: %v", err)
	}
	defer store.Close()

	// 3) –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP –∏ —Ä–æ—É—Ç—ã
	r := gin.Default()
	// –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º webhookSecret –∏ stripeAPIKey
	routes.RegisterAll(
		r,
		store,
		cfg.StripeWebhookSecret,
		cfg.StripeSecretKey,
		cfg.JWTSecret,
		cfg.UserServiceURL,
	)
	fmt.Println(">>> STRIPE_WEBHOOK_SECRET:", cfg.StripeWebhookSecret)
	// 4) –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	addr := fmt.Sprintf(":%d", cfg.Port)
	log.Printf("üöÄ Payment-service listening on %s\n", addr)
	if err := r.Run(addr); err != nil {
		log.Fatalf("server error: %v", err)
	}
}
